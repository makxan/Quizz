/*
* generated by Xtext
*/
grammar InternalWeek1;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package se.bjornkjellgren.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package se.bjornkjellgren.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import se.bjornkjellgren.services.Week1GrammarAccess;

}

@parser::members {

 	private Week1GrammarAccess grammarAccess;
 	
    public InternalWeek1Parser(TokenStream input, Week1GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Week1";	
   	}
   	
   	@Override
   	protected Week1GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleWeek1
entryRuleWeek1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWeek1Rule()); }
	 iv_ruleWeek1=ruleWeek1 
	 { $current=$iv_ruleWeek1.current; } 
	 EOF 
;

// Rule Week1
ruleWeek1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getWeek1Access().getElementsExpressionParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeek1Rule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleExpression
entryRuleExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); } 
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current.getText(); }  
	 EOF 
;

// Rule Expression
ruleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getTerminalExpressionParserRuleCall_0()); 
    }
    this_TerminalExpression_0=ruleTerminalExpression    {
		$current.merge(this_TerminalExpression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getOperatorParserRuleCall_1_0()); 
    }
    this_Operator_1=ruleOperator    {
		$current.merge(this_Operator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getTerminalExpressionParserRuleCall_1_1()); 
    }
    this_TerminalExpression_2=ruleTerminalExpression    {
		$current.merge(this_TerminalExpression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); } 
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current.getText(); }  
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalExpressionAccess().getLeftParenthesisKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression    {
		$current.merge(this_Expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTerminalExpressionAccess().getRightParenthesisKeyword_0_2()); 
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getNumberParserRuleCall_1()); 
    }
    this_Number_3=ruleNumber    {
		$current.merge(this_Number_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); } 
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current.getText(); }  
	 EOF 
;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getAsteriskKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall()); 
    }

    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


